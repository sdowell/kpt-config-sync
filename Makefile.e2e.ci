### Golang e2e tests targets running against a GKE cluster

# Build a test docker container with gcloud and kubectl installed.
__build-e2e-go-container:
	@echo "+++ Building build/test-e2e-go/gke/Dockerfile nomos-gcloud-image"
	@docker buildx build . \
	 	--network host \
		-f build/test-e2e-go/gke/Dockerfile \
		-t nomos-gcloud-image

GCP_CLUSTER ?= $(USER)-cluster-1
GCP_ZONE ?= us-central1-a
GKE_E2E_TIMEOUT ?= 6h

# Run the golang e2e tests sequentially (--parallel 1) on a GKE cluster.
# It requires a GKE cluster to be installed in `$(GCP_PROJECT)` and `$(GCP_ZONE)`/`$(GCP_REGION)`.
# The cluster name should follow the pattern `$(USER)-cluster-1`.
__docker-run-e2e-go-gke: config-sync-manifest __build-e2e-go-container
	@echo "+++ Running go e2e tests $(E2E_ARGS)"
	@echo "GCP_PROJECT=$(GCP_PROJECT)"
	@echo "GCP_CLUSTER=$(GCP_CLUSTER)"
	@echo "GCP_ZONE=$(GCP_ZONE)"
	@echo "GCP_REGION=$(GCP_REGION)"
	@echo "REGISTRY=$(REGISTRY)"
	@echo "ARTIFACTS=$(ARTIFACTS)"
	@echo "GKE_E2E_TIMEOUT=$(GKE_E2E_TIMEOUT)"
	@docker run \
		-v /var/run/docker.sock:/var/run/docker.sock \
		-v $(ARTIFACTS):/logs/artifacts \
		--env GCP_PROJECT=$(GCP_PROJECT) \
		--env GCP_CLUSTER=$(GCP_CLUSTER) \
		--env GCP_ZONE=$(GCP_ZONE) \
		--env GCP_REGION=$(GCP_REGION) \
		--network=host \
		nomos-gcloud-image \
		./build/test-e2e-go/e2e.sh \
			--timeout $(GKE_E2E_TIMEOUT) \
			--test.v -v \
			--parallel 1 \
			--p 1 \
			--test-cluster=gke \
			$(E2E_ARGS)

# The CI target that runs the golang e2e test on a GKE cluster in prow with various E2E_ARGS.
# Examples:
# 1. Run tests in multi-repo mode:
#    make E2E_ARGS="--share-test-env" test-e2e-go-gke-ci
# 2. Run tests in multi-repo mode with Bitbucket:
#    make E2E_ARGS="--share-test-env --git-provider=bitbucket" test-e2e-go-gke-ci
# 3. Run tests in multi-repo mode with KCC resources:
#    make E2E_ARGS="--share-test-env --kcc -run=TestKCC*" test-e2e-go-gke-ci
# 4. Run the stress tests in multi-repo mode:
#    make E2E_ARGS="--stress -run=TestStress*" test-e2e-go-gke-ci
test-e2e-go-gke-ci:
	$(MAKE) E2E_ARGS="$(E2E_ARGS)" \
		__docker-run-e2e-go-gke

# The CI target that runs the first group of tests with the multi-repo mode on GKE cluster.
test-e2e-gke-multi-repo-test-group1:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --share-test-env --test-features=acm-controller,nomos-cli,override-api" \
		test-e2e-go-gke-ci

# The CI target that runs the second group of tests with the multi-repo mode on GKE cluster.
test-e2e-gke-multi-repo-test-group2:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --share-test-env --test-features=cluster-selector,hydration" \
		test-e2e-go-gke-ci

# The CI target that runs the third group of tests with the multi-repo mode on GKE cluster.
test-e2e-gke-multi-repo-test-group3:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --share-test-env --test-features=drift-control,lifecycle" \
		test-e2e-go-gke-ci

# The CI target that runs the fourth group of tests with the multi-repo mode on GKE cluster.
test-e2e-gke-multi-repo-test-group4:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --share-test-env --test-features=multi-repos" \
		test-e2e-go-gke-ci

# The CI target that runs the fifth group of tests with the multi-repo mode on GKE cluster.
test-e2e-gke-multi-repo-test-group5:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --share-test-env --test-features=reconciliation-1" \
		test-e2e-go-gke-ci

# The CI target that runs the sixth group of tests with the multi-repo mode on GKE cluster.
test-e2e-gke-multi-repo-test-group6:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --share-test-env --test-features=reconciliation-2" \
		test-e2e-go-gke-ci

# The CI target that runs the seventh group of tests with the multi-repo mode on GKE cluster.
test-e2e-gke-multi-repo-test-group7:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --share-test-env --test-features=sync-source" \
		test-e2e-go-gke-ci

# The CI target that runs the eighth group of tests with the multi-repo mode on GKE cluster.
test-e2e-gke-multi-repo-test-group8:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --share-test-env --test-features=workload-identity,notification" \
		test-e2e-go-gke-ci
