# Included by Makefile.
# Rules related to building nomos and docker images.

HELM := $(BIN_DIR)/helm

###################################
# Build environment
###################################

# Pulls the cached builenv docker image from gcrio.
pull-buildenv:
	@docker image inspect $(BUILDENV_IMAGE) &> /dev/null \
	|| docker pull $(BUILDENV_IMAGE)

build-buildenv: build/buildenv/Dockerfile
	@echo "+++ Creating the docker container for $(BUILDENV_IMAGE)"
	@docker buildx build $(DOCKER_BUILD_QUIET) build/buildenv -t $(BUILDENV_IMAGE)

push-buildenv: build-buildenv
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	@docker push $(BUILDENV_IMAGE)

###################################
# Docker images
###################################

.PHONY: build
build: $(OUTPUT_DIR) pull-buildenv
	@echo "+++ Build setup done"

# NOTE: this rule depends on OUTPUT_DIR because buildenv needs those dirs to
# exist in order to work.
PLATFORMS := linux_amd64 linux_arm64 darwin_amd64 darwin_arm64 windows_amd64
build-cli: pull-buildenv buildenv-dirs
	@echo "+++ Compiling Nomos binaries for $(PLATFORMS)"
	@echo "+++ Compiling with VERSION: $(VERSION)"
	@mkdir -p $(addprefix $(OUTPUT_DIR)/go/bin/,$(PLATFORMS))
	@docker run $(DOCKER_RUN_ARGS) ./scripts/build.sh \
		--version $(VERSION) \
		$(PLATFORMS)

# NOTE: this rule depends on OUTPUT_DIR because buildenv needs those dirs to
# exist in order to work.
build-junit-report-cli: pull-buildenv buildenv-dirs
	@echo "+++ Compiling junit-report binaries for linux_amd64"
	@echo "+++ Compiling with VERSION: $(VERSION)"
	@mkdir -p $(addprefix $(OUTPUT_DIR)/go/bin/,linux_amd64)
	@docker run $(DOCKER_RUN_ARGS) ./scripts/build-junitreport-cli.sh linux_amd64 $(VERSION)

# Build Config Sync docker images
.PHONY: build-images
build-images:
	@echo "+++ Building the Reconciler image: $(RECONCILER_TAG)"
	@docker buildx build $(DOCKER_BUILD_QUIET) \
		--target $(RECONCILER_IMAGE) \
		-t $(RECONCILER_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Reconciler Manager image: $(RECONCILER_MANAGER_TAG)"
	@docker buildx build $(DOCKER_BUILD_QUIET) \
		--target $(RECONCILER_MANAGER_IMAGE) \
		-t $(RECONCILER_MANAGER_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Admission Webhook image: $(ADMISSION_WEBHOOK_TAG)"
	@docker buildx build $(DOCKER_BUILD_QUIET) \
		--target $(ADMISSION_WEBHOOK_IMAGE) \
		-t $(ADMISSION_WEBHOOK_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Hydration Controller image: $(HYDRATION_CONTROLLER_TAG)"
	@docker buildx build $(DOCKER_BUILD_QUIET) \
		--target $(HYDRATION_CONTROLLER_IMAGE) \
		-t $(HYDRATION_CONTROLLER_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Hydration Controller image with shell: $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)"
	@docker buildx build $(DOCKER_BUILD_QUIET) \
		--target $(HYDRATION_CONTROLLER_WITH_SHELL_IMAGE) \
		-t $(HYDRATION_CONTROLLER_WITH_SHELL_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the OCI-sync image: $(OCI_SYNC_TAG)"
	@docker buildx build $(DOCKER_BUILD_QUIET) \
		--target $(OCI_SYNC_IMAGE) \
		-t $(OCI_SYNC_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Helm-sync image: $(HELM_SYNC_TAG)"
	@docker buildx build $(DOCKER_BUILD_QUIET) \
		--target $(HELM_SYNC_IMAGE) \
		-t $(HELM_SYNC_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Nomos image: $(NOMOS_TAG)"
	@docker buildx build $(DOCKER_BUILD_QUIET) \
		--target $(NOMOS_IMAGE) \
		-t $(NOMOS_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Notification image: $(NOTIFICATION_TAG)"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target $(NOTIFICATION_IMAGE) \
		-t $(NOTIFICATION_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.

# Deprecated alias of build-images. Remove this once unused.
.PHONY: build-images-multirepo
build-images-multirepo: build-images

# Pushes Config Sync docker images to REGISTRY.
.PHONY: push-images
push-images:
	@echo "+++ Pushing Config Sync images to $(REGISTRY)"
	@echo "+++ Using account:"
	gcloud config get-value account
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	docker push $(RECONCILER_TAG)
	docker push $(RECONCILER_MANAGER_TAG)
	docker push $(ADMISSION_WEBHOOK_TAG)
	docker push $(HYDRATION_CONTROLLER_TAG)
	docker push $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)
	docker push $(OCI_SYNC_TAG)
	docker push $(HELM_SYNC_TAG)
	docker push $(NOMOS_TAG)
	docker push $(NOTIFICATION_TAG)

# Deprecated alias of push-images. Remove this once unused.
.PHONY: push-images-multirepo
push-images-multirepo: push-images

# Pulls all Config Sync images from REGISTRY
.PHONY: pull-images
pull-images:
	@echo "+++ Pulling Config Sync images from $(REGISTRY)"
	docker pull $(RECONCILER_TAG)
	docker pull $(RECONCILER_MANAGER_TAG)
	docker pull $(ADMISSION_WEBHOOK_TAG)
	docker pull $(HYDRATION_CONTROLLER_TAG)
	docker pull $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)
	docker pull $(OCI_SYNC_TAG)
	docker pull $(HELM_SYNC_TAG)
	docker pull $(NOMOS_TAG)
	docker pull $(NOTIFICATION_TAG)

# Deprecated alias of pull-images. Remove this once unused.
.PHONY: pull-images-multirepo
pull-images-multirepo: pull-images

# Retags previously built Config Sync images
.PHONY: retag-images
retag-images:
	@echo "+++ Retagging Config Sync images from $(OLD_REGISTRY)/*:$(OLD_IMAGE_TAG) to $(REGISTRY)/*:$(IMAGE_TAG)"
	docker tag $(OLD_REGISTRY)/$(RECONCILER_IMAGE):$(OLD_IMAGE_TAG) $(RECONCILER_TAG)
	docker tag $(OLD_REGISTRY)/$(RECONCILER_MANAGER_IMAGE):$(OLD_IMAGE_TAG) $(RECONCILER_MANAGER_TAG)
	docker tag $(OLD_REGISTRY)/$(ADMISSION_WEBHOOK_IMAGE):$(OLD_IMAGE_TAG) $(ADMISSION_WEBHOOK_TAG)
	docker tag $(OLD_REGISTRY)/$(HYDRATION_CONTROLLER_IMAGE):$(OLD_IMAGE_TAG) $(HYDRATION_CONTROLLER_TAG)
	docker tag $(OLD_REGISTRY)/$(HYDRATION_CONTROLLER_WITH_SHELL_IMAGE):$(OLD_IMAGE_TAG) $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)
	docker tag $(OLD_REGISTRY)/$(OCI_SYNC_IMAGE):$(OLD_IMAGE_TAG) $(OCI_SYNC_TAG)
	docker tag $(OLD_REGISTRY)/$(HELM_SYNC_IMAGE):$(OLD_IMAGE_TAG) $(HELM_SYNC_TAG)
	docker tag $(OLD_REGISTRY)/$(NOMOS_IMAGE):$(OLD_IMAGE_TAG) $(NOMOS_TAG)
	docker tag $(OLD_REGISTRY)/$(NOTIFICATION_IMAGE):$(OLD_IMAGE_TAG) $(NOTIFICATION_TAG)

# Deprecated alias of retag-images. Remove this once unused.
.PHONY: retag-images-multirepo
retag-images-multirepo: retag-images

###################################
# Config Sync manifest
###################################

# Build Config Sync manifests for ACM operator and OSS.
.PHONY: build-manifests
build-manifests: build-manifests-operator build-manifests-oss

# Build Config Sync manifests for OSS installations
.PHONY: build-manifests-oss
build-manifests-oss: "$(GOBIN)/addlicense" "$(GOBIN)/kustomize" $(OUTPUT_DIR)
	@ echo "+++ Generating manifests in $(OSS_MANIFEST_STAGING_DIR)"
	@ echo "    Using these tags:"
	@ echo "    $(RECONCILER_MANAGER_IMAGE): $(RECONCILER_MANAGER_TAG)"
	@ echo "    $(HYDRATION_CONTROLLER_IMAGE): $(HYDRATION_CONTROLLER_TAG)"
	@ echo "    $(HYDRATION_CONTROLLER_WITH_SHELL_IMAGE): $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)"
	@ echo "    $(RECONCILER_IMAGE): $(RECONCILER_TAG)"
	@ echo "    $(ADMISSION_WEBHOOK_IMAGE): $(ADMISSION_WEBHOOK_TAG)"
	@ echo "    $(OCI_SYNC_IMAGE): $(OCI_SYNC_TAG)"
	@ echo "    $(HELM_SYNC_IMAGE): $(HELM_SYNC_TAG)"
	@ rm -f $(OSS_MANIFEST_STAGING_DIR)/*
	@ "$(GOBIN)/kustomize" build --load-restrictor=LoadRestrictionsNone manifests/oss \
		| sed \
			-e "s|RECONCILER_IMAGE_NAME|$(RECONCILER_TAG)|g" \
			-e "s|OCI_SYNC_IMAGE_NAME|$(OCI_SYNC_TAG)|g" \
			-e "s|HELM_SYNC_IMAGE_NAME|$(HELM_SYNC_TAG)|g" \
			-e "s|HYDRATION_CONTROLLER_IMAGE_NAME|$(HYDRATION_CONTROLLER_TAG)|g" \
			-e "s|RECONCILER_MANAGER_IMAGE_NAME|$(RECONCILER_MANAGER_TAG)|g" \
		> $(OSS_MANIFEST_STAGING_DIR)/config-sync-manifest.yaml
	@ "$(GOBIN)/addlicense" $(OSS_MANIFEST_STAGING_DIR)/config-sync-manifest.yaml

	@ # Additional optional OSS manifests
	@ rsync \
		manifests/acm-psp.yaml $(OSS_MANIFEST_STAGING_DIR)/acm-psp.yaml
	@ cat "manifests/templates/admission-webhook.yaml" \
		| sed -e "s|WEBHOOK_IMAGE_NAME|$(ADMISSION_WEBHOOK_TAG)|g" \
		> $(OSS_MANIFEST_STAGING_DIR)/admission-webhook.yaml

	@ echo "+++ Manifests generated in $(OSS_MANIFEST_STAGING_DIR)"

# Build Config Sync manifests for ACM operator
.PHONY: build-manifests-operator
build-manifests-operator: "$(GOBIN)/addlicense" "$(GOBIN)/kustomize" $(OUTPUT_DIR)
	@ echo "+++ Generating manifests in $(NOMOS_MANIFEST_STAGING_DIR)"
	@ echo "    Using these tags:"
	@ echo "    $(RECONCILER_MANAGER_IMAGE): $(RECONCILER_MANAGER_TAG)"
	@ echo "    $(HYDRATION_CONTROLLER_IMAGE): $(HYDRATION_CONTROLLER_TAG)"
	@ echo "    $(HYDRATION_CONTROLLER_WITH_SHELL_IMAGE): $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)"
	@ echo "    $(RECONCILER_IMAGE): $(RECONCILER_TAG)"
	@ echo "    $(ADMISSION_WEBHOOK_IMAGE): $(ADMISSION_WEBHOOK_TAG)"
	@ echo "    $(OCI_SYNC_IMAGE): $(OCI_SYNC_TAG)"
	@ echo "    $(HELM_SYNC_IMAGE): $(HELM_SYNC_TAG)"
	@ rm -f $(NOMOS_MANIFEST_STAGING_DIR)/*
	@ "$(GOBIN)/kustomize" build --load-restrictor=LoadRestrictionsNone manifests/operator \
		| sed \
			-e "s|RECONCILER_IMAGE_NAME|$(RECONCILER_TAG)|g" \
			-e "s|OCI_SYNC_IMAGE_NAME|$(OCI_SYNC_TAG)|g" \
			-e "s|HELM_SYNC_IMAGE_NAME|$(HELM_SYNC_TAG)|g" \
			-e "s|HYDRATION_CONTROLLER_IMAGE_NAME|$(HYDRATION_CONTROLLER_TAG)|g" \
			-e "s|RECONCILER_MANAGER_IMAGE_NAME|$(RECONCILER_MANAGER_TAG)|g" \
			-e "s|WEBHOOK_IMAGE_NAME|$(ADMISSION_WEBHOOK_TAG)|g" \
		> $(NOMOS_MANIFEST_STAGING_DIR)/config-sync-manifest.yaml
	@ "$(GOBIN)/addlicense" $(NOMOS_MANIFEST_STAGING_DIR)/config-sync-manifest.yaml

	@ echo "+++ Manifests generated in $(NOMOS_MANIFEST_STAGING_DIR)"

# config-sync-manifest-no-push creates the config-sync-manifest.yaml and builds images without pushing
.PHONY: config-sync-manifest-no-push
config-sync-manifest-no-push: $(OUTPUT_DIR) build-images build-manifests

# config-sync-manifest creates config sync manifest and pushes its docker images
.PHONY: config-sync-manifest
config-sync-manifest: config-sync-manifest-no-push push-images

# config-sync-manifest-local builds config sync for local testing in kind.
# starts local docker registry and pushes images to the local registry
.PHONY: config-sync-manifest-local
config-sync-manifest-local:
	@bash scripts/docker-registry.sh
	$(MAKE) config-sync-manifest \
		REGISTRY=localhost:5000 \
		IMAGE_TAG=$(IMAGE_TAG)

###################################
# E2E Git Server
###################################

# NOTE: when updating the git-server version, update
# e2e/nomostest/git-server.go to reflect the version change
GIT_SERVER_DOCKER := $(OUTPUT_DIR)/git-server-docker
GIT_SERVER_RELEASE := v1.0.0
# Creates docker image for the test git-server from github source
build-git-server:
	@echo "+++ Building image for test git server"
	@mkdir -p $(OUTPUT_DIR)
	@rm -rf $(GIT_SERVER_DOCKER)
	@git clone https://github.com/jkarlosb/git-server-docker.git $(GIT_SERVER_DOCKER)
	@cd $(GIT_SERVER_DOCKER) && git checkout $(GIT_SERVER_RELEASE)
	@docker buildx build $(DOCKER_BUILD_QUIET) \
			$(GIT_SERVER_DOCKER) \
			-t gcr.io/stolos-dev/git-server:$(GIT_SERVER_RELEASE)
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	@docker push gcr.io/stolos-dev/git-server:$(GIT_SERVER_RELEASE)

# NOTE: when updating the git-server version, update
# e2e/nomostest/git-server.go to reflect the version change
E2E_TEST_IMAGE_HTTP_GIT_SERVER_TAG := v1.0.0
E2E_TEST_IMAGE_HTTP_GIT_SERVER := gcr.io/stolos-dev/http-git-server:$(E2E_TEST_IMAGE_HTTP_GIT_SERVER_TAG)
# Builds the container used by e2e tests to test git over HTTPS.
build-http-git-server:
	@echo "+++ Building the http-git-server image"
	docker buildx build \
		-t $(E2E_TEST_IMAGE_HTTP_GIT_SERVER) \
		test/docker/http-git-server/
	@docker push $(E2E_TEST_IMAGE_HTTP_GIT_SERVER)

###################################
# E2E Notification Webhook Server
###################################

# NOTE: when updating the test-notification-webhook version, update
# e2e/nomostest/notification_server.go to reflect the version change
E2E_TEST_IMAGE_HTTP_NOTIFICATION_WEBHOOK_TAG := v1.0.0
E2E_TEST_IMAGE_HTTP_NOTIFICATION_WEBHOOK_SERVER := gcr.io/stolos-dev/test-notification-webhook:$(E2E_TEST_IMAGE_HTTP_NOTIFICATION_WEBHOOK_TAG)
# Builds the container used by e2e tests to test notifications using a webhook.
.PHONY: build-http-notification-webhook
build-http-notification-webhook:
	@echo "+++ Building the test-notification-webhook image"
	docker buildx build \
		-t $(E2E_TEST_IMAGE_HTTP_NOTIFICATION_WEBHOOK_SERVER) \
		-f ./test/docker/http-notification-webhook/Dockerfile \
		.
	@docker push $(E2E_TEST_IMAGE_HTTP_NOTIFICATION_WEBHOOK_SERVER)
